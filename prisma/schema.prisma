generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  relationMode = "prisma"
}

// NOTE: Use userId to scope all queries to the current user

model EFFICHRON_Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user EFFICHRON_User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model EFFICHRON_Session {
  id           String         @id @default(cuid())
  sessionToken String         @unique
  userId       String
  expires      DateTime
  user         EFFICHRON_User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EFFICHRON_User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime            @default(now())
  accounts      EFFICHRON_Account[]
  sessions      EFFICHRON_Session[]
}

model EFFICHRON_VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EFFICHRON_SessionLog {
  id              String   @id @default(uuid())
  userId          String
  sessionSnapshot String   @db.VarChar(1000) // This will store the strigified session object.
  createdAt       DateTime @default(now())
}

model EFFICHRON_Task {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String
  createdAt DateTime @default(now())
}
